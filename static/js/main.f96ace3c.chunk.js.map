{"version":3,"sources":["helpers/make-request.ts","helpers/storage.ts","helpers/event-month.ts","components/title/title.tsx","components/select/select.tsx","components/filter/filter.tsx","components/filters/filters.tsx","components/header/header.tsx","helpers/get-unique-values-of-objects.ts","helpers/convert-event-date-to-day-month-year.ts","components/mark/mark.tsx","components/card/card.tsx","components/cards/cards.tsx","components/main/main.tsx","components/app/app.tsx","index.tsx","api/api.ts"],"names":["HTTP_RESPONSE_STATUS_CODES","Storage","constructor","namespace","getNamespace","this","identifier","Date","now","toString","localStorage","setItem","removeItem","get","data","getItem","JSON","parse","set","stringify","fromMonthName","Title","React","Component","render","className","props","title","Select","id","name","value","onChange","options","map","option","width","height","viewBox","fill","xmlns","focusable","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","Filter","htmlFor","onFilterChange","Filters","filters","filter","NO_FILTERING","filtersValuesStorage","isAvailable","Header","super","handleFilterChange","setState","prevState","filtersValues","getFiltersValues","onFiltersChanges","uniqueCities","objects","keys","converters","results","Array","from","length","Set","forEach","object","key","index","converter","add","Function","result","sort","a","b","getUniqueValuesOfObjects","events","state","uniqueCity","Object","MonthNameToEventMonth","month","event","target","memory","Map","convertEventDateToDayMonthYear","date","memorizedValue","undefined","day","year","split","dayMonthYear","Mark","type","checked","isMarked","Card","style","backgroundImage","image","dateTime","onMarkChange","Cards","cards","card","markedCardsStorage","Main","handleMarkChange","getMarkedCards","markedCards","city","Boolean","cardsFilter","App","favorites","async","url","response","fetch","status","text","Error","json","makeRequest","getEvents","ReactDOM","StrictMode","document","getElementById","error","console","bootstrap"],"mappings":"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","file":"static/js/main.f96ace3c.chunk.js","sourcesContent":["const HTTP_RESPONSE_STATUS_CODES = { OK: 200 } as const;\n\n/** @throws */\nexport async function makeRequest<Type>(\n  url: string,\n  options?: RequestInit\n): Promise<Type> {\n  const response = await fetch(url, options);\n\n  if (response.status !== HTTP_RESPONSE_STATUS_CODES.OK) {\n    const text = await response.text();\n\n    throw new Error(text);\n  }\n\n  const json = response.json();\n\n  return json as Promise<Type>;\n}\n","export class Storage<Type> {\n  private getNamespace: () => string;\n\n  public constructor(namespace: string) {\n    this.getNamespace = () => {\n      return namespace;\n    };\n  }\n\n  public static isAvailable(): boolean {\n    const identifier = Date.now().toString();\n\n    try {\n      localStorage.setItem(identifier, identifier);\n      localStorage.removeItem(identifier);\n\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  public get(): Type | null {\n    try {\n      const data = localStorage.getItem(this.getNamespace());\n\n      return typeof data === 'string' ? (JSON.parse(data) as Type) : null;\n    } catch {\n      return null;\n    }\n  }\n\n  public set(data: Type): boolean {\n    try {\n      localStorage.setItem(this.getNamespace(), JSON.stringify(data));\n\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n","type EventMonth =\n  | '01'\n  | '02'\n  | '03'\n  | '04'\n  | '05'\n  | '06'\n  | '07'\n  | '08'\n  | '09'\n  | '10'\n  | '11'\n  | '12';\n\ntype MonthName =\n  | 'January'\n  | 'February'\n  | 'March'\n  | 'April'\n  | 'May'\n  | 'June'\n  | 'July'\n  | 'August'\n  | 'September'\n  | 'October'\n  | 'November'\n  | 'December';\n\nexport const toMonthName: { [key in EventMonth]: MonthName } = {\n  '01': 'January',\n  '02': 'February',\n  '03': 'March',\n  '04': 'April',\n  '05': 'May',\n  '06': 'June',\n  '07': 'July',\n  '08': 'August',\n  '09': 'September',\n  '10': 'October',\n  '11': 'November',\n  '12': 'December',\n} as const;\n\nexport const fromMonthName: { [key in MonthName]: EventMonth } = {\n  'January': '01',\n  'February': '02',\n  'March': '03',\n  'April': '04',\n  'May': '05',\n  'June': '06',\n  'July': '07',\n  'August': '08',\n  'September': '09',\n  'October': '10',\n  'November': '11',\n  'December': '12',\n} as const;\n","import React from 'react';\n\nimport './title.scss';\n\nexport interface TitleProps {\n  title: string;\n}\n\nexport class Title extends React.Component<TitleProps> {\n  public override render(): JSX.Element {\n    return <h1 className=\"title\">{this.props.title}</h1>;\n  }\n}\n","import React from 'react';\n\nimport './select.scss';\n\nexport interface SelectProps {\n  id: string;\n  value: string;\n  title: string;\n  options: {\n    value: string;\n    title: string;\n  }[];\n  onChange?: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n}\n\nexport class Select extends React.Component<SelectProps> {\n  public override render(): JSX.Element {\n    return (\n      <div className=\"select\">\n        <select\n          className=\"select__element\"\n          id={this.props.id}\n          name={this.props.id}\n          value={this.props.value}\n          aria-label={this.props.title}\n          onChange={this.props.onChange}\n        >\n          {this.props.options.map((option) => {\n            return (\n              <option\n                className=\"select__option\"\n                value={option.value}\n                key={option.value}\n              >\n                {option.title}\n              </option>\n            );\n          })}\n        </select>\n        <svg\n          className=\"select__icon\"\n          width=\"14\"\n          height=\"8\"\n          viewBox=\"0 0 14 8\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          aria-hidden=\"true\"\n          focusable=\"false\"\n        >\n          <path\n            d=\"m1 1 6 6 6-6\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          />\n        </svg>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport { Select, SelectProps } from '../select/select';\nimport './filter.scss';\n\nexport interface FilterProps\n  extends Omit<\n    SelectProps & { onFilterChange: NonNullable<SelectProps['onChange']> },\n    'onChange'\n  > {}\n\nexport class Filter extends React.Component<FilterProps> {\n  public override render(): JSX.Element {\n    return (\n      <div className=\"filter\">\n        <label className=\"filter__title\" htmlFor={this.props.id}>\n          {this.props.title}:\n        </label>\n        <div className=\"filter__select\">\n          <Select\n            id={this.props.id}\n            value={this.props.value}\n            title={this.props.title}\n            options={this.props.options}\n            onChange={this.props.onFilterChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport { Filter, FilterProps } from '../filter/filter';\nimport './filters.scss';\n\nexport interface FiltersProps {\n  filters: FilterProps[];\n}\n\nexport class Filters extends React.Component<FiltersProps> {\n  public override render(): JSX.Element {\n    return (\n      <form className=\"filters\" id=\"filters\" name=\"filters\">\n        {this.props.filters.map((filter) => {\n          return (\n            <div className=\"filters__filter\" key={filter.id}>\n              <Filter {...filter} />\n            </div>\n          );\n        })}\n      </form>\n    );\n  }\n}\n","import React from 'react';\n\nimport { FilterProps } from '../filter/filter';\nimport { Storage } from '../../helpers/storage';\nimport { APIEvent } from '../../api/api';\nimport { getUniqueValuesOfObjects } from '../../helpers/get-unique-values-of-objects';\nimport { fromMonthName as MonthNameToEventMonth } from '../../helpers/event-month';\nimport { Title } from '../title/title';\nimport { Filters } from '../filters/filters';\nimport './header.scss';\n\nconst NO_FILTERING = 'All';\n\nexport type FiltersValues = { [key: FilterProps['id']]: FilterProps['value'] };\nconst filtersValuesStorage = Storage.isAvailable()\n  ? new Storage<FiltersValues>('filtersValues')\n  : null;\n\nexport interface HeaderProps {\n  events: APIEvent[];\n  onFiltersChanges(filtersValues: FiltersValues): void;\n}\n\ninterface HeaderState {\n  filters: FilterProps[];\n}\n\nexport class Header extends React.Component<HeaderProps, HeaderState> {\n  public constructor(props: HeaderProps) {\n    super(props);\n\n    const [uniqueCities = []] = getUniqueValuesOfObjects(this.props.events, [\n      'city',\n    ]);\n    const filtersValues = filtersValuesStorage?.get() ?? {};\n\n    this.state = {\n      filters: [\n        {\n          id: 'city',\n          title: 'City',\n          options: uniqueCities.map((uniqueCity) => {\n            return { value: uniqueCity, title: uniqueCity };\n          }),\n        },\n        {\n          id: 'month',\n          title: 'Month',\n          options: Object.keys(MonthNameToEventMonth).map((month) => {\n            return {\n              value: month,\n              title: month,\n            };\n          }),\n        },\n        {\n          id: 'favorites',\n          title: 'Favorites',\n          options: [\n            { value: 'Marked', title: 'Marked' },\n            { value: 'Unmarked', title: 'Unmarked' },\n          ],\n        },\n      ].map((filter) => {\n        return {\n          ...filter,\n          options: [{ value: NO_FILTERING, title: 'All' }, ...filter.options],\n          value: filtersValues[filter.id] ?? NO_FILTERING,\n          onFilterChange: (event) => {\n            this.handleFilterChange(filter.id, event.target.value);\n          },\n        };\n      }),\n    };\n\n    this.props.onFiltersChanges(filtersValues);\n  }\n\n  private getFiltersValues(): FiltersValues {\n    const filtersValues: FiltersValues = {};\n\n    this.state.filters.forEach((filter) => {\n      if (filter.value === NO_FILTERING) {\n        return;\n      }\n\n      filtersValues[filter['id']] = filter.value;\n    });\n\n    return filtersValues;\n  }\n\n  private handleFilterChange = (\n    id: FilterProps['id'],\n    value: FilterProps['value']\n  ): void => {\n    this.setState(\n      (prevState) => {\n        return {\n          filters: prevState.filters.map((filter) => {\n            return filter['id'] === id ? { ...filter, value } : filter;\n          }),\n        };\n      },\n      () => {\n        const filtersValues = this.getFiltersValues();\n\n        this.props.onFiltersChanges(filtersValues);\n        filtersValuesStorage?.set(filtersValues);\n      }\n    );\n  };\n\n  public override render(): JSX.Element {\n    return (\n      <header className=\"header\">\n        <div className=\"header__title\">\n          <Title title=\"Event Listing\" />\n        </div>\n        <div className=\"header__filters\">\n          <Filters filters={this.state.filters} />\n        </div>\n      </header>\n    );\n  }\n}\n","export function getUniqueValuesOfObjects<\n  Obj extends Object,\n  Key extends keyof Obj\n>(\n  objects: Obj[],\n  keys: Key[],\n  converters: (((value: Obj[Key]) => Obj[Key]) | null)[] = []\n): Array<Array<Obj[Key]>> {\n  const results = Array.from({ length: keys.length }, () => {\n    return new Set<Obj[Key]>();\n  });\n\n  objects.forEach((object) => {\n    keys.forEach((key, index) => {\n      const value = object[key];\n      const converter = converters[index];\n\n      results[index]?.add(\n        converter instanceof Function ? converter(value) : value\n      );\n    });\n  });\n\n  return results.map((result) => {\n    return Array.from(result).sort((a, b) => {\n      if (a > b) return 1;\n      if (a < b) return -1;\n      return 0;\n    });\n  });\n}\n","import { APIEvent } from '../api/api';\n\ninterface DayMonthYear {\n  day: string;\n  month: string;\n  year: string;\n}\n\nconst memory = new Map<APIEvent['date'], DayMonthYear>();\n\n/**\n * @example\n * convertAPIEventDateToDayMonthYear('14.09.2019');\n * // -> { day: '14'; month: '09'; year: '2019'; }\n */\nexport function convertEventDateToDayMonthYear(\n  date: APIEvent['date']\n): DayMonthYear {\n  const memorizedValue = memory.get(date);\n\n  if (memorizedValue !== undefined) {\n    return memorizedValue;\n  }\n\n  const [day = '', month = '', year = ''] = date.split('.');\n  const dayMonthYear: DayMonthYear = { day, month, year };\n\n  memory.set(date, dayMonthYear);\n\n  return dayMonthYear;\n}\n","import React from 'react';\n\nimport './mark.scss';\n\nexport interface MarkProps {\n  id: string;\n  title: string;\n  isMarked: boolean;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport class Mark extends React.Component<MarkProps> {\n  public override render(): JSX.Element {\n    return (\n      <div className=\"mark\">\n        <input\n          className=\"mark__element\"\n          id={this.props.id}\n          name={this.props.id}\n          type=\"checkbox\"\n          checked={this.props.isMarked}\n          aria-label={this.props.title}\n          title={this.props.title}\n          onChange={this.props.onChange}\n        />\n        <svg\n          className=\"mark__icon\"\n          width=\"16\"\n          height=\"20\"\n          viewBox=\"0 0 16 20\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          aria-hidden=\"true\"\n          focusable=\"false\"\n        >\n          <path\n            d=\"m15 19-7-5-7 5V3a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16Z\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          />\n        </svg>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport { Mark, MarkProps } from '../mark/mark';\nimport './card.scss';\n\nexport interface CardProps {\n  id: string;\n  title: string;\n  date: {\n    day: string;\n    month: string;\n    year: string;\n  };\n  city: string;\n  image: string;\n  isMarked: MarkProps['isMarked'];\n  onMarkChange: NonNullable<MarkProps['onChange']>;\n}\n\nexport class Card extends React.Component<CardProps> {\n  public override render(): JSX.Element {\n    const { day, month, year } = this.props.date;\n\n    return (\n      <article\n        className=\"card\"\n        id={this.props.id}\n        style={{ backgroundImage: `url(\"${this.props.image}\")` }}\n      >\n        <div className=\"card__overlay\">\n          <h2 className=\"card__title\" title={this.props.title}>\n            {this.props.title}\n          </h2>\n          <time\n            className=\"card__date\"\n            dateTime={`${year}-${month}-${day}`}\n            aria-label={`${day}.${month}.${year}`}\n            title={`${day}.${month}.${year}`}\n          >\n            <span aria-hidden=\"true\">{day}</span>\n          </time>\n          <div className=\"card__mark\">\n            <Mark\n              id={`mark-for-${this.props.id}`}\n              title={\n                this.props.isMarked\n                  ? 'Remove from favorites'\n                  : 'Add to favorites'\n              }\n              isMarked={this.props.isMarked}\n              onChange={this.props.onMarkChange}\n            />\n          </div>\n        </div>\n      </article>\n    );\n  }\n}\n","import React from 'react';\n\nimport { Card, CardProps } from '../card/card';\nimport './cards.scss';\n\nexport interface CardsProps {\n  cards: CardProps[];\n}\n\nexport class Cards extends React.Component<CardsProps> {\n  public override render(): JSX.Element {\n    if (this.props.cards.length === 0) {\n      return (\n        <div className=\"cards\">\n          <p className=\"cards__message\">No events</p>\n        </div>\n      );\n    }\n\n    return (\n      <ul className=\"cards\">\n        {this.props.cards.map((card) => {\n          return (\n            <li className=\"cards__card\" key={card.id}>\n              <Card {...card} />\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n}\n","import React from 'react';\n\nimport { CardProps } from '../card/card';\nimport { Storage } from '../../helpers/storage';\nimport { APIEvent } from '../../api/api';\nimport { convertEventDateToDayMonthYear } from '../../helpers/convert-event-date-to-day-month-year';\nimport { Cards } from '../cards/cards';\n\nexport type MarkedCards = { [key: CardProps['id']]: true };\nconst markedCardsStorage = Storage.isAvailable()\n  ? new Storage<MarkedCards>('markedCards')\n  : null;\n\nexport interface MainProps {\n  events: APIEvent[];\n  cardsFilter(card: CardProps): boolean;\n}\n\ninterface MainState {\n  cards: CardProps[];\n}\n\nexport class Main extends React.Component<MainProps, MainState> {\n  public constructor(props: MainProps) {\n    super(props);\n\n    const markedCards = markedCardsStorage?.get() ?? {};\n\n    this.state = {\n      cards: this.props.events.map((event) => {\n        return {\n          id: event.id,\n          title: event.name,\n          date: convertEventDateToDayMonthYear(event.date),\n          city: event.city,\n          image: event.image,\n          isMarked: Boolean(markedCards[event.id]),\n          onMarkChange: () => {\n            this.handleMarkChange(event.id);\n          },\n        };\n      }),\n    };\n  }\n\n  private getMarkedCards(): MarkedCards {\n    const markedCards: MarkedCards = {};\n\n    this.state.cards.forEach((card) => {\n      if (card.isMarked === true) {\n        markedCards[card['id']] = card.isMarked;\n      }\n    });\n\n    return markedCards;\n  }\n\n  private handleMarkChange = (id: CardProps['id']): void => {\n    this.setState(\n      (prevState) => {\n        return {\n          cards: prevState.cards.map((card) => {\n            return card['id'] === id\n              ? { ...card, isMarked: !card['isMarked'] }\n              : card;\n          }),\n        };\n      },\n      () => {\n        markedCardsStorage?.set(this.getMarkedCards());\n      }\n    );\n  };\n\n  public override render(): JSX.Element {\n    return (\n      <main className=\"main\">\n        <div className=\"main__cards\">\n          <Cards cards={this.state.cards.filter(this.props.cardsFilter)} />\n        </div>\n      </main>\n    );\n  }\n}\n","import React from 'react';\n\nimport { APIEvent } from '../../api/api';\nimport { FiltersValues } from '../header/header';\nimport { Header } from '../header/header';\nimport { Main } from '../main/main';\nimport { fromMonthName as MonthNameToEventMonth } from '../../helpers/event-month';\nimport './app.scss';\n\nexport interface AppProps {\n  events: APIEvent[];\n}\n\ninterface AppState {\n  filtersValues: FiltersValues;\n}\n\nexport class App extends React.Component<AppProps, AppState> {\n  public override state = { filtersValues: {} } as Readonly<AppState>;\n\n  public override render(): JSX.Element {\n    return (\n      <div className=\"app\">\n        <div className=\"app__header\">\n          <Header\n            events={this.props.events}\n            onFiltersChanges={(filtersValues): void => {\n              this.setState({ filtersValues });\n            }}\n          />\n        </div>\n        <div className=\"app__main\">\n          <Main\n            events={this.props.events}\n            cardsFilter={(card) => {\n              const { city, month, favorites } = this.state.filtersValues;\n\n              if (\n                (city === undefined || city === card.city) &&\n                (month === undefined ||\n                  MonthNameToEventMonth[\n                    month as keyof typeof MonthNameToEventMonth\n                  ] === card.date.month) &&\n                (favorites === undefined ||\n                  (favorites === 'Marked' || !(favorites === 'Unmarked')) ===\n                    card.isMarked)\n              )\n                return true;\n\n              return false;\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport React from 'react';\n\nimport { API } from './api/api';\nimport { App } from './components/app/app';\nimport './index.scss';\n\nasync function bootstrap() {\n  try {\n    const events = await API.getEvents();\n\n    ReactDOM.render(\n      <React.StrictMode>\n        <App events={events} />\n      </React.StrictMode>,\n      document.getElementById('root')\n    );\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nbootstrap();\n","import { makeRequest } from '../helpers/make-request';\n\nconst URL = '/event-listing/data/events.json';\n\nexport interface APIEvent {\n  id: string;\n  name: string;\n  date: string;\n  city: string;\n  genre: string;\n  image: string;\n}\n\nexport class API {\n  public static async getEvents(): Promise<APIEvent[]> {\n    return makeRequest<APIEvent[]>(URL);\n  }\n}\n"],"sourceRoot":""}